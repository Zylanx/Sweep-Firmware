/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>


#define FIRST 0
#define SECOND 1
#define THIRD 2
#define FOURTH 3
#define BT 4


&mt {
    // flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

&mmv {
   time-to-max-speed-ms = <100>;
   acceleration-exponent = <2>;
};

/ {
    behaviors {
		skq: sticky_key_quick_release {
			compatible = "zmk,behavior-sticky-key";
			label = "STICKY_KEY_QUICK_RELEASE";
			#binding-cells = <1>;
			bindings = <&kp>;
			release-after-ms = <2000>;
			quick-release;
		};
		
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        
        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
	
	// TODO: normalise space and switching as well as return keys

    keymap {
        compatible = "zmk,keymap";
        
        first_layer {
            bindings = <
                &kp Q &kp W      &kp E      &kp R       &kp T          &kp Y    &kp U       &kp I          &kp O        &kp P
                &kp A &hm LGUI S &hm LALT D &hm LCTRL F &kp G          &kp H    &hm RCTRL J &hm RALT K     &hm RGUI L   &td SEMI QUOT
                &kp Z &kp X      &kp C      &kp V       &kp B          &kp N    &kp M       &td SLASH CMMA &td EXCL DOT &kp RET
                                            &skq LSHIFT &kp SPC        &kp BKSP &to SECOND
            >;
        };

        second_layer {
            bindings = <
                &kp ESC   &kp AT    &kp HASH  &kp DLLR  &kp PRCNT       &kp CARET &kp AMPS  &kp STAR &kp SEMI &kp DEL
                &kp TAB   &kp EQUAL &kp MINUS &trans    &kp SQT         &kp BSLH  &kp LPRN  &kp RPRN &kp PIPE &to FOURTH
                &kp GRAVE &sk LCTRL &trans    &trans    &kp DQT         &kp LBKT  &kp LBRC  &kp RBRC &kp RBKT &kp RET
                                              &skq LSHFT &to FIRST      &trans  &to THIRD
            >;
        };
        
        third_layer {
            bindings = <  // Add the cursor keys to this layer as well
                &kp ESC &kp HOME &kp UP   &kp END   &kp PG_UP       &kp MINUS &kp N7    &kp N8 &kp N9 &trans
                &trans  &kp LEFT &kp DOWN &kp RIGHT &kp PG_DN       &kp EQUAL &kp N4    &kp N5 &kp N6 &kp DOT
                &to BT  &trans   &trans   &trans    &trans          &kp N0    &kp N1    &kp N2 &kp N3 &kp RET
                                          &trans    &to FIRST       &trans  &to SECOND
            >;
        };  
    
        fourth_layer {
            bindings = <
                &trans    &trans           &mmv MOVE_UP      &mwh SCROLL_UP   &trans          &trans    &trans     &kp UP   &kp PG_UP &trans
                &trans    &mmv MOVE_LEFT   &mmv MOVE_DOWN    &mmv MOVE_RIGHT  &trans          &trans    &kp LEFT   &kp DOWN &kp RIGHT &to SECOND
                &mkp RCLK &mwh SCROLL_LEFT &mwh SCROLL_RIGHT &mwh SCROLL_DOWN &trans          &mkp LCLK &kp HOME   &kp END  &kp PG_DN &kp RET
                                                             &trans           &to FIRST       &trans  &to SECOND
            >;
        };
        
        bt_layer {
            bindings = <
                &trans     &trans     &trans     &trans    &trans      &trans &trans     &trans &trans &trans
                &trans     &trans     &trans     &trans    &trans      &trans &trans     &trans &trans &trans
                &bt BT_PRV &bt BT_NXT &bt BT_CLR &trans    &trans      &trans &trans     &trans &trans &trans
                                                 &trans    &to FIRST   &trans &to SECOND
            >;
        };
    };
};
